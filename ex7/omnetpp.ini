

###################################################################

[General]
network = CurrentNetwork
sim-time-limit = ${simtime=10, 100, 1000}s
repeat = 10

**.networkConfiguratorModule = ""
**.ppp[*].numInputHooks = 1
**.ppp[*].inputHook[0].typename = "ThruputMeter"
**.ppp[*].inputHook[0].maxInterval = 0.1s
**.ppp[*].inputHook[0].batchSize = 10000
**.ppp[*].inputHook[0].**.vector-recording = true
**.vector-recording = true
**.scalar-recording = true
# NIC configuration

# Each router is output port buffered and the buffer
# has a maximum capacity of 40 IP packets, regardless of their size:

# Define a simple DropTailQueue
**.ppp[*].queueType = "DropTailQueue"
# The queue is supposed to buffer 40 packets/frames
**.ppp[*].queue.frameCapacity = 40


[Config CurrentNetwork]
sim-time-limit = 100s

# user settings
# The TCPBasicClientApp opens a connection and sends a specified number of requests
# The requests contain the length of the response (replyLength)
# The thinktime specifies the time between those requests.
# When the number of requests of a session is sent, the session closes
# After the time specified in idleInterval a new session is opened.
**.user[*].numTcpApps = 1
**.user[*].tcpApp[0].typename = "TCPBasicClientApp"
**.user[*].tcpApp[0].localPort = -1
**.user[*].tcpApp[0].numRequestsPerSession = 1
**.user[*].tcpApp[0].connectAddress = "internet"
**.user[*].tcpApp[0].connectPort = 80
**.user[*].tcpApp[0].requestLength = 8KiB
**.user[*].tcpApp[0].thinkTime = 0

# Measurements have shown that the file size is exponentially
# distributed with a mean value of 150 kB
**.user[*].tcpApp[0].replyLength = exponential(150KiB)
# The pause time is also exponentially distributed with a mean of 30 s.
**.user[*].tcpApp[0].idleInterval = exponential(30s)

   
# internet settings
# The TCPGenericSrvApp replys to a requests, which specifies the replylength.
# An unlimited number of sessions can be opened.
**.internet.numTcpApps = 1
**.internet.tcpApp[0].typename = "TCPGenericSrvApp"
**.internet.tcpApp[0].localPort = 80
**.internet.tcpApp[0].echoFactor = 0

# This is important for the TCPGenericSrvApp to reply to the requests
**.tcpApp[*].dataTransferMode = "object"
# The routers currently support only IP packets containing
# TCP segments with a Maximum Segment Size (MSS) of 1000 Byte.
**.tcp.mss = 1000

# TCPNewReno
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
# The upper bound of the congestion window is supposed to be 100
# Alex: I'm not quite sure if this does the trick.
**.tcp.advertisedWindow = 14*this.mss


#CurrentNetwork.num_bb 
*.num_bb = 5
*.num_access_per_bb = 5
*.num_user_per_access = 25
# REMEMBER TO MANUALLY EXECUTE THE CONNECTOR SCRIPT


[Config VoiceTest]
sim-time-limit = 100s

**.vector-recording = true

# user settings
# The TCPBasicClientApp opens a connection and sends a specified number of requests
# The requests contain the length of the response (replyLength)
# The thinktime specifies the time between those requests.
# When the number of requests of a session is sent, the session closes
# After the time specified in idleInterval a new session is opened.

# General Setup for voice
**.user[*].numUdpApps = 2
**.user[*].udpApp[0].typename = "VoIPApp"
**.user[*].udpApp[0].localPort = -1
**.user[*].udpApp[0].destPort = 1000
**.user[*].udpApp[0].sendInterval = 20ms
**.user[*].udpApp[0].messageLength = 32B
**.user[*].udpApp[0].startTime = 1s
**.user[*].udpApp[0].maxDelay = 200ms

**.user[*].udpApp[1].typename = "VoIPApp"
**.user[*].udpApp[1].localPort = 1000
**.user[*].udpApp[1].destPort = -1
**.user[*].udpApp[1].destAddresses = ""
**.user[*].udpApp[1].sendInterval = 0s
**.user[*].udpApp[1].messageLength = 0B
**.user[*].udpApp[1].startTime = 0.5s
**.user[*].udpApp[1].maxDelay = 200ms

#Individual connections of udp apps

# NOTE: First generate worst case user interconnections manually by shell:
# ./user_connector.py -voip -b <backbones> -a <access_routers_per_bb> -u <users_per_access_router>
#    e.g.: ./user_connector.py -voip -b 2 -a 1 -u 2
#include user_connections_voicetest.ini




[Config Simultaneous]
sim-time-limit = 20s
# user settings
# The TCPBasicClientApp opens a connection and sends a specified number of requests
# The requests contain the length of the response (replyLength)
# The thinktime specifies the time between those requests.
# When the number of requests of a session is sent, the session closes
# After the time specified in idleInterval a new session is opened.
**.user[*].numTcpApps = 1
**.user[*].tcpApp[0].typename = "TCPBasicClientApp"
**.user[*].tcpApp[0].localPort = -1
**.user[*].tcpApp[0].numRequestsPerSession = 1
**.user[*].tcpApp[0].connectAddress = "internet"
**.user[*].tcpApp[0].connectPort = 80
**.user[*].tcpApp[0].requestLength = 8KiB
**.user[*].tcpApp[0].thinkTime = 0

# Measurements have shown that the file size is exponentially
# distributed with a mean value of 150 kB
**.user[*].tcpApp[0].replyLength = exponential(150KiB)
# The pause time is also exponentially distributed with a mean of 30 s.
**.user[*].tcpApp[0].idleInterval = exponential(30s)

   
# internet settings
# The TCPGenericSrvApp replys to a requests, which specifies the replylength.
# An unlimited number of sessions can be opened.
**.internet.numTcpApps = 1
**.internet.tcpApp[0].typename = "TCPGenericSrvApp"
**.internet.tcpApp[0].localPort = 80
**.internet.tcpApp[0].echoFactor = 0

# This is important for the TCPGenericSrvApp to reply to the requests
**.tcpApp[*].dataTransferMode = "object"
# The routers currently support only IP packets containing
# TCP segments with a Maximum Segment Size (MSS) of 1000 Byte.
**.tcp.mss = 1000

# TCPNewReno
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
# The upper bound of the congestion window is supposed to be 100
# Alex: I'm not quite sure if this does the trick.
**.tcp.advertisedWindow = 14*this.mss


#CurrentNetwork.num_bb 
*.num_bb = 5
*.num_access_per_bb = 5
*.num_user_per_access = 25
# REMEMBER TO MANUALLY EXECUTE THE CONNECTOR SCRIPT

# user settings
**.user[*].numUdpApps = 1
**.user[*].udpApp[0].typename = "VoIPApp"
**.user[*].udpApp[0].localPort = 1000
**.user[*].udpApp[0].destPort = 1000
**.user[*].udpApp[0].sendInterval = 200ms
**.user[*].udpApp[0].messageLength = 44B
**.user[*].udpApp[0].startTime = 1s
**.user[*].udpApp[0].maxDelay = 200ms

# Generate worst case user interconnections manually by shell:
# ./user_connector.py -b <backbones> -a <access_routers_per_bb> -u <users_per_access_router>
#    e.g.: ./user_connector.py -b 2 -a 1 -u 2
#include user_connections_voicetest.ini

# This file includes regular voip user connections for omnet++/exercise7
# connections that use the gateway
**.user[296].udpApp[0].destAddresses = "user[85]"
**.user[85].udpApp[0].destAddresses = "user[296]"

**.user[17].udpApp[0].destAddresses = "user[608]"
**.user[608].udpApp[0].destAddresses = "user[17]"

**.user[317].udpApp[0].destAddresses = "user[436]"
**.user[436].udpApp[0].destAddresses = "user[317]"

**.user[392].udpApp[0].destAddresses = "user[547]"
**.user[547].udpApp[0].destAddresses = "user[392]"

**.user[370].udpApp[0].destAddresses = "user[135]"
**.user[135].udpApp[0].destAddresses = "user[370]"

**.user[199].udpApp[0].destAddresses = "user[276]"
**.user[276].udpApp[0].destAddresses = "user[199]"

# connections that use use a backbone router
**.user[394].udpApp[0].destAddresses = "user[414]"
**.user[414].udpApp[0].destAddresses = "user[394]"

**.user[22].udpApp[0].destAddresses = "user[115]"
**.user[115].udpApp[0].destAddresses = "user[22]"

**.user[386].udpApp[0].destAddresses = "user[474]"
**.user[474].udpApp[0].destAddresses = "user[386]"

**.user[43].udpApp[0].destAddresses = "user[11]"
**.user[11].udpApp[0].destAddresses = "user[43]"

**.user[248].udpApp[0].destAddresses = "user[161]"
**.user[161].udpApp[0].destAddresses = "user[248]"

**.user[571].udpApp[0].destAddresses = "user[610]"
**.user[610].udpApp[0].destAddresses = "user[571]"

**.user[505].udpApp[0].destAddresses = "user[597]"
**.user[597].udpApp[0].destAddresses = "user[505]"

**.user[496].udpApp[0].destAddresses = "user[470]"
**.user[470].udpApp[0].destAddresses = "user[496]"

**.user[167].udpApp[0].destAddresses = "user[235]"
**.user[235].udpApp[0].destAddresses = "user[167]"

**.user[527].udpApp[0].destAddresses = "user[503]"
**.user[503].udpApp[0].destAddresses = "user[527]"

**.user[393].udpApp[0].destAddresses = "user[433]"
**.user[433].udpApp[0].destAddresses = "user[393]"

# connections that use only an access router
**.user[460].udpApp[0].destAddresses = "user[453]"
**.user[453].udpApp[0].destAddresses = "user[460]"

**.user[284].udpApp[0].destAddresses = "user[292]"
**.user[292].udpApp[0].destAddresses = "user[284]"

**.user[249].udpApp[0].destAddresses = "user[239]"
**.user[239].udpApp[0].destAddresses = "user[249]"

**.user[431].udpApp[0].destAddresses = "user[429]"
**.user[429].udpApp[0].destAddresses = "user[431]"

**.user[94].udpApp[0].destAddresses = "user[78]"
**.user[78].udpApp[0].destAddresses = "user[94]"

**.user[565].udpApp[0].destAddresses = "user[557]"
**.user[557].udpApp[0].destAddresses = "user[565]"

**.user[267].udpApp[0].destAddresses = "user[254]"
**.user[254].udpApp[0].destAddresses = "user[267]"

**.user[593].udpApp[0].destAddresses = "user[578]"
**.user[578].udpApp[0].destAddresses = "user[593]"

**.user[305].udpApp[0].destAddresses = "user[314]"
**.user[314].udpApp[0].destAddresses = "user[305]"

**.user[26].udpApp[0].destAddresses = "user[45]"
**.user[45].udpApp[0].destAddresses = "user[26]"

**.user[337].udpApp[0].destAddresses = "user[325]"
**.user[325].udpApp[0].destAddresses = "user[337]"

**.user[132].udpApp[0].destAddresses = "user[146]"
**.user[146].udpApp[0].destAddresses = "user[132]"

**.user[7].udpApp[0].destAddresses = "user[23]"
**.user[23].udpApp[0].destAddresses = "user[7]"

**.user[42].udpApp[0].destAddresses = "user[39]"
**.user[39].udpApp[0].destAddresses = "user[42]"

**.user[577].udpApp[0].destAddresses = "user[586]"
**.user[586].udpApp[0].destAddresses = "user[577]"

**.user[12].udpApp[0].destAddresses = "user[15]"
**.user[15].udpApp[0].destAddresses = "user[12]"

