# TO IMPLEMENT:
# -------------
# * video conf connection (maybe we can recycle our VoIPApp for that?
#                          Nope, I think we need to use RTP..)
# * web browsing students
# * FTP uploading student

[General]
network = ExamTaskNetwork
# TODO: choose sensible values
sim-time-limit = ${simtime=1000, 3000, 10000}s
repeat = 10

# some can be enabled if desired, but
# this produces a lot of data
**.thruputMeter.**.vector-recording = true	
# disable all others
**.vector-recording = false

# throughputmeter: Best is to undo the code change recommended in exercise 6
**.maxInterval = 1s	# interval for the throughputmeters
**.batchSize = 10000 # batch size for the throughputmeters

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

**.channelNumber = 0
# "the students usually do not move with their laptop 
# and can be considered stationary"
**.mobilityType = "StationaryMobility"
**.mobility.initFromDisplayString = false
# [lotte] wait why do we need these?
**.AccessPoint.mobility.initialX = 25m
**.AccessPoint.mobility.initialY = 25m
**.AccessPoint.mobility.initialZ = 0m
# "all wireless users are uniformly distributed in a 400m^2
# *quadratic* area around the AccessPoint" (so not as in ex 3.6))
# note that this also includes the ftp and video laptops!
# TODO: is the default RNG OK?
**.BrowsingLaptop[*].mobility.initialX = uniform(0m, 20m)
**.BrowsingLaptop[*].mobility.initialY = uniform(0m, 20m)
**.BrowsingLaptop[*].mobility.initialZ = 0m

**.FTPLaptop.mobility.initialX = uniform(0m, 20m)
**.FTPLaptop.mobility.initialY = uniform(0m, 20m)
**.FTPLaptop.mobility.initialZ = 0m

**.ConferenceLaptop.mobility.initialX = uniform(0m, 20m)
**.ConferenceLaptop.mobility.initialY = uniform(0m, 20m)
**.ConferenceLaptop.mobility.initialZ = 0m

# general tcp settings
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
**.tcp.windowScalingSupport = true
# This is important for the TCPGenericSrvApp to reply to the requests
**.tcpApp[*].dataTransferMode = "object"

# the PDUs of upper layers (e.g., TCP) should be as large as possible
# to reduce protocol overhead: Assimung a 14-Byte Ethernet header (i.e. without
# IEEE802.1Q tags bc I doubt we're using the VLAN tagging feature) +
# and a 20-Byte IPv4 header (i.e. without options TODO– is this true?),
# we're left with 1500-14-20 = 1466 bytes of TCP PDU.
**.tcp.mss = 1466
# the receiver side advertises a receive window of 1000 times the maximum segment size (MSS).
# do not use this.mss here but directly give a number
**.tcp.advertisedWindow = 1466000

# Routing
**.networkConfiguratorModule = ""

# NIC settings
**.mac.address = "auto"
**.mac.maxQueueSize = 14
**.mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.wlan[*].mac.cwMinMulticast = 31
**.opMode = "g"
**.mgmt.frameCapacity = 50

# Internet TCP settings
#**.Internet.numTcpApps = 1
#**.Internet.tcpApp[0].typename = "TCPGenericSrvApp"
#**.Internet.tcpApp[0].localPort = 80

# TODO: TCP apps for ftp, professor, cctv etc

# BrowsingLaptop TCP settings
#**.BrowsingLaptop[*].numTcpApps = 1
#**.BrowsingLaptop[*].tcpApp[0].typename = "TCPBasicClientApp"
#**.BrowsingLaptop[*].tcpApp[0].connectAddress = "Internet"
#**.BrowsingLaptop[*].tcpApp[0].thinkTime = 0
#**.BrowsingLaptop[*].tcpApp[0].localPort = -1
#**.BrowsingLaptop[*].tcpApp[0].numRequestsPerSession = 1
#**.BrowsingLaptop[*].tcpApp[0].connectPort = 80
# TODO: param OK?
#**.BrowsingLaptop[*].tcpApp[0].requestLength = 8KiB
# Group specific parameters:
# The requested size (in Byte) from trace file trace_13.txt
#**.BrowsingLaptop[*].tcpApp[0].replyLength = exponential(250B)#get_trace()
#**.BrowsingLaptop[*].tcpApp[0].idleInterval = exponential(20s)

# CCTV settings
# The monitor receives videodata, is thus the client
**.CCTVMonitoring.numUdpApps = 1
**.CCTVMonitoring.udpApp[0].typename = "UDPVideoStreamCli"
**.CCTVMonitoring.udpApp[0].serverAddress = "CCTVCamera"
**.CCTVMonitoring.udpApp[0].serverPort = 1000
**.CCTVMonitoring.udpApp[0].localPort = 1000
**.CCTVMonitoring.udpApp[0].startTime = 1s

# The [CCTV] stream is modelled as a constant UDP stream containing
# packets of size 10KB every 40 ms.
**.CCTVCamera.numUdpApps = 1
**.CCTVCamera.udpApp[0].typename = "UDPVideoStreamSvr"
**.CCTVCamera.udpApp[0].localPort = 1000
**.CCTVCamera.udpApp[0].sendInterval = 40ms
**.CCTVCamera.udpApp[0].packetLen = 10000B
# make sure the video keeps streaming the whole experiment:
# 25 transmissions à 10kB per second = 250000 B / s
# * max(sim-time-limit) [currently 10000]
# (plus 5s just to be sure)
# TODO: adjust to new max(sim-time-limit) or figure out how to read that value
**.CCTVCamera.udpApp[0].videoSize = 2500000000B

# video conference settings
# The video call application uses the Real-time Transport Protocol (RTP) over 
# User Datagram Protocol (UDP) over Internet Protocol version 4 (IPv4).
# TODO: actually use RTP?
**.ProfessorsLaptop.numUdpApps = 1
**.ProfessorsLaptop.udpApp[0].typename = "VoIPApp"
**.ProfessorsLaptop.udpApp[0].localPort = 1000
**.ProfessorsLaptop.udpApp[0].destPort = 1000
**.ProfessorsLaptop.udpApp[0].sendInterval = 40ms
# messageLength = 1388 bytes payload + 12 bytes bminimal RTP header
**.ProfessorsLaptop.udpApp[0].messageLength = 1400B
**.ProfessorsLaptop.udpApp[0].startTime = 0.1s
# TODO: correct?
**.ProfessorsLaptop.udpApp[0].maxDelay = 40ms
**.ProfessorsLaptop.udpApp[0].destAddresses = "ConferenceLaptop"

**.ConferenceLaptop.numUdpApps = 1
**.ConferenceLaptop.udpApp[0].typename = "VoIPApp"
**.ConferenceLaptop.udpApp[0].localPort = 1000
**.ConferenceLaptop.udpApp[0].destPort = 1000
**.ConferenceLaptop.udpApp[0].sendInterval = 40ms
# messageLength = 1388 bytes payload + 12 bytes bminimal RTP header
**.ConferenceLaptop.udpApp[0].messageLength = 1400B
**.ConferenceLaptop.udpApp[0].startTime = 0.1s
**.ConferenceLaptop.udpApp[0].maxDelay = 40ms
**.ConferenceLaptop.udpApp[0].destAddresses = "ProfessorsLaptop"


# set static routes
**.RemoteRouter.routingFile = "StaticRoutes_RemoteRouter.irt"
**.MainRouter.routingFile = "StaticRoutes_MainRouter.irt"
