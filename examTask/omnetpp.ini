[General]
network = ExamTaskNetwork
# TODO: choose sensible values
sim-time-limit = ${simtime=1000, 3000, 10000}s
repeat = 10

# [TODO] - CCTV camera stream:
#  - activated for one team member
#  - deactivated for the other team member

# some can be enabled if desired, but
# this produces a lot of data
**.thruputMeter.**.vector-recording = true	
# disable all others
**.vector-recording = false

# throughputmeter: Best is to undo the code change recommended in exercise 6
**.maxInterval = 1s	# interval for the throughputmeters
**.batchSize = 10000 # batch size for the throughputmeters

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

**.channelNumber = 0
# "the students usually do not move with their laptop 
# and can be considered stationary"
**.mobilityType = "StationaryMobility"
**.mobility.initFromDisplayString = false
# [lotte] wait why do we need these?
**.AccessPoint.mobility.initialX = 25
**.AccessPoint.mobility.initialY = 25
**.AccessPoint.mobility.initialZ = 0m
# "all wireless users are uniformly distributed in a 400m^2
# *quadratic* area around the AccessPoint" (so not as in ex 3.6))
# note that mobile stations also include ftp and video laptop!
# TODO: is the default RNG OK?
**.BrowsingLaptop[*].mobility.initialX = uniform(0m, 20m)
**.BrowsingLaptop[*].mobility.initialY = uniform(0m, 20m)
**.BrowsingLaptop[*].mobility.initialZ = 0m

**.FTPLaptop.mobility.initialX = uniform(0m, 20m)
**.FTPLaptop.mobility.initialY = uniform(0m, 20m)
**.FTPLaptop.mobility.initialZ = 0m

**.ConferenceLaptop.mobility.initialX = uniform(0m, 20m)
**.ConferenceLaptop.mobility.initialY = uniform(0m, 20m)
**.ConferenceLaptop.mobility.initialZ = 0m

# Some tcp settings
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = TCPNewReno
**.tcp.windowScalingSupport = true
**.tcpApp[*].dataTransferMode = "object"

# the PDUs of upper layers (e.g., TCP) should be as large as possible
# to reduce protocol overhead: Assimung a 14-Byte Ethernet header (i.e. without
# IEEE802.1Q tags bc I doubt we're using the VLAN tagging feature) +
# and a 20-Byte IPv4 header (i.e. without options TODOâ€“ is this true?),
# we're left with 1500-14-20 = 1466 bytes of TCP PDU.
**.tcp.mss = 1466
# the receiver side advertises a receive window of 1000 times the maximum segment size (MSS).
# do not use this.mss here but directly give a number
**.tcp.advertisedWindow = 1466000

# Routing
**.networkConfiguratorModule = ""

# NIC settings
**.mac.address = "auto"
**.mac.maxQueueSize = 14
**.mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.wlan[*].mac.cwMinMulticast = 31
**.opMode = "g"
**.mgmt.frameCapacity = 50


**.BrowsingLaptop[*].numTcpApps = 1
**.BrowsingLaptop[*].tcpApp[0].typename = "TCPBasicClientApp"
**.BrowsingLaptop[*].tcpApp[0].connectAddress = "Internet"
# Group specific parameters:
# The requested size (in Byte) from trace file trace_13.txt
**.BrowsingLaptop[*].tcpApp[0].replyLength = get_trace()
**.BrowsingLaptop[*].tcpApp[0].idleInterval = exponential(20s)

#**.networkConfiguratorModule = "" # ?
# set static routes
#**.Router.routingFile                          = "StaticRoutes.irt"
